# medgemma.py
import os, base64, tempfile
from PIL import Image

# Ollama Python SDK (pip install ollama)
try:
    import ollama
    OLLAMA_AVAILABLE = True
except Exception:
    OLLAMA_AVAILABLE = False

# Vision model to use (any local vision‑capable model works)
# Examples: "amsaravi/medgemma-4b-it:q6", "gemma2:2b-vision"
OLLAMA_MODEL = os.getenv("OLLAMA_MODEL", "amsaravi/medgemma-4b-it:q6")
OLLAMA_HOST  = os.getenv("OLLAMA_HOST", "http://127.0.0.1:11434")

DISCLAIMER = (
    "This report is generated by an AI and should not be considered a substitute for professional medical advice. "
    "The information provided is for educational purposes only and should be reviewed by a qualified healthcare professional."
)

SUMMARY_PROMPT = """You are MedGemma. Create a structured, clear MRI image analysis report given:
1) The tumor class predicted by a separate classifier: {label}
2) The MRI image (attached)

Rules:
- DO NOT give medical advice or a clinical diagnosis. Educational tone only.
- Return plain text (no Markdown asterisks).
- Be specific but cautious; you only see one image.
- If image quality is insufficient, say so gently.

Sections (exact headings, in this order):
MedGemma Report for {label}:
{disclaimer}

MRI Image Analysis Report: {label}
1. Tumor Type Classification:
   - Identify/confirm the tumor type (e.g., glioma, meningioma, pituitary adenoma, etc.) using visible imaging patterns typical for {label}.

2. Tumor Size Estimation (Diameter in cm):
   - Provide an approximate tumor diameter in centimeters [cm]. State assumptions about scale if unknown.

3. Tumor Grading & Risk Stratification:
   - Indicate general low-grade vs. high-grade tendencies for {label} based on literature (not a diagnosis). Include overall risk level.

4. Personalized Treatment Recommendations (Research Perspective):
   - Outline typical treatment pathways for {label} considering general patient factors (age, sex, medical history, comorbidities). Not patient-specific.

5. Symptom Analysis & Supportive Remedies:
   - List likely symptoms associated with {label} and supportive remedies that may alleviate discomfort.

6. Functional Impact Assessment:
   - Describe potential neurological/physical impairments (motor, vision, speech, cognition) that could result from {label}, depending on size/location.

7. Recurrence Risk Prediction:
   - Summarize general recurrence risk trends for {label} after standard treatments.

8. Benign–Malignant Prediction:
   - Provide general likelihood tendencies of benign vs. malignant behavior for {label} based on typical patterns (not patient-specific).

9. Comorbidity Analysis:
   - Describe common coexisting conditions and how they may affect diagnosis, treatment, and outcomes.

Final disclaimer: Educational use only — not a medical diagnosis.
"""

def _downscale_to_b64(path: str, max_side: int = 1024, quality: int = 85) -> str:
    img = Image.open(path).convert("RGB")
    w, h = img.size
    if max(w, h) > max_side:
        if w >= h:
            new_w = max_side; new_h = int(h * (max_side / w))
        else:
            new_h = max_side; new_w = int(w * (max_side / h))
        img = img.resize((new_w, new_h))
    with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as tmp:
        img.save(tmp.name, "JPEG", quality=quality, optimize=True)
        with open(tmp.name, "rb") as f:
            b64 = base64.b64encode(f.read()).decode("utf-8")
    try:
        os.unlink(tmp.name)
    except Exception:
        pass
    return b64

def generate_summary(image_path: str, label: str) -> str:
    """
    Send BOTH the predicted label (text) and the MRI image (base64) to the local
    Ollama vision model for a structured plain‑text report. Falls back if unavailable.
    """
    prompt = SUMMARY_PROMPT.format(label=label, disclaimer=DISCLAIMER)

    # if not (OLLAMA_AVAILABLE and OLLAMA_MODEL and os.path.exists(image_path)):
    #     return (
    #         f"MedGemma Report for {label}:\n\n"
    #         f"{DISCLAIMER}\n\n"
    #         f"MRI Image Analysis Report: {label}\n\n"
    #         "1. Estimated Tumor Size: Not precisely measurable from this single image.\n\n"
    #         "2. General Grading & Risk: Grading (I–IV) needs histology; risk varies with grade/location.\n\n"
    #         "3. Possible Conditions: Astrocytoma, Oligodendroglioma, Ependymoma.\n\n"
    #         "4. Suggested Next Research/Tests: Biopsy, molecular testing, contrast‑enhanced MRI.\n\n"
    #         "5. Likelihood of Benign vs. Malignant: Depends on grade/subtype; higher grade is more aggressive.\n\n"
    #         "6. Comorbidity Analysis: Seizures/headaches/deficits may co‑occur depending on size/location.\n\n"
    #         "Final disclaimer: Educational use only — not a medical diagnosis."
    #     )

    # Ensure SDK talks to your Ollama host
    if OLLAMA_HOST:
        os.environ["OLLAMA_HOST"] = OLLAMA_HOST

    b64 = _downscale_to_b64(image_path)

    # Call the vision model (Ollama 0.11.x supports base64 via 'images' list)
    res = ollama.chat(
        model=OLLAMA_MODEL,
        messages=[{"role": "user", "content": prompt, "images": [b64]}],
        stream=False
    )

    # Python SDK returns {'message': {'content': '...'}} OR {'response': '...'}
    text = (res.get("message", {}) or {}).get("content", "") or res.get("response", "")
    text = (text or "").strip()

    if not text:
        return "MedGemma returned no content."
    return text
